#+title: mtv-monome
* PITFALL: If I need to see the voice_jit or jit_test branches
they are in the old monome/ repo.
* TODO delete references to Config parameters
** instead, make a Config type, and put an instance in Monome.Config
** that way, functions can take an arbitrary Config, so I can test them without making the tests depend on the hard-coded value in Monome.Config
* TODO make *_st versions of some EdoMmath functions
e.g. variations on this appear a lot:
              (pcToXys (st_01f ^. stApp . etConfig)
                       (st_01f ^. stApp . etXyShift) pitch1 ) )
It would be better to have a pcToXys_st function, that just took a single St
in place of those first two arguments.

Find these with `grep etConfig -C 2`.
* TODO the bugs that vanish when `edo=31`
** test_toggleSustain
x = toggleSustain st_0f
y = ( st_0f & ( stApp . etLit . at pc0 . _Just
              %~ S.insert LedBecauseSustain )
      & stApp . etSustaineded .~ Just (S.singleton v0 ) )
x ^. stApp . etLit . at pc0 . _Just
y ^. stApp . etLit . at pc0 . _Just
** test_sustainHandler
x = Su.handler st_0f (meh, True) ^. stApp . etLit
y = M.singleton pc0 $ S.fromList [ LedBecauseSustain
                                 , LedBecauseSwitch xy0 ]
** test_keyboardHandler
x = Kb.handler st_01f (xy1, False) ^. stPending_Monome
y = ( map (\xy -> (Kb.label, (xy, False)) )
  (pcToXys (st_01f ^. stApp . etXyShift) pitch1 ) )
* TODO generalize to all EDOs
** make Math31 "generators" into user-defined parameter
maybe defined in Params or Common or whatever, instead of Math31
* TODO clean
** unify the handlers for JI and Keyboard
* TODO create voices on the fly
** Vivid: voice creation, use and deletion
use "synth" to make a synth, "free" to free it:
  s <- synth boop
  set s (toI f :: I "amp")
  free s
* TODO sustained pitches should not disable keys
** after spatial drift
Currently, because each voice is identified with a key,
if that voice is sustained, that key cannot sound a new note,
even when it no longer represents the same pitch.
** ? or at all
* TODO for JI synth
** print each note as it is played
* TODO features
** two keyboards, split keyboard
** sustain: two buttons, "add these" and "release all"
"add these" has on/off state, stays in effect until it is released.
"release all" has no state -- it fires as soon as it's touched, and holding it does nothing.
** store pitchsets from sustain
** transpose {pitchsets, ongoing notes, either keyboard}
** make pitchsets available on a per-degree basis
** timbre the board
higher tones are harsher
rightward tones are (warblier?)
** redraw the whole screen often
*** why
Dropped messages to LEDs stop being a (hypothetical) problem.
Shading on both monomes becomes easier.
** flash the anchor
** volume, timbre control for {sustained notes, either keyboard}
** reset buttons
*** silence all voices
*** redraw entire grid
*** ? restore shift to identity vector
to remove floating point error
** sustain to middle of bottom, and duplicate at both top corners
so that usually something can touch it
* infrastructure
** add tests
*** TODO test multiple handlers
**** hold 2 notes, press sustain, shift, release one of them
**** hold 2 notes, press sustain, shift, release one of them, release sustain
**** hold a note, shift, press another note, press sustain
**** hold a note, shift, press another note, press sustain, release them
** LedBecause: maybe don't distinguish between keys and sustain
 just use VoiceId
