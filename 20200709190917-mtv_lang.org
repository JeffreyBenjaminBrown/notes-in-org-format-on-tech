#+title: mtv-lang
* TODO ONGOING - study the code
** resume at Dispatch.Dispatch
and then the sketches
** count imports
grep "import *Montevideo" -r . -c | sort -n -t: -k2
*** TODO ? A dependency graph would be better.
** modules I've read
Dispatch.Types
Dispatch.Msg.Mk
Dispatch.Transform
Dispatch.Time
Dispatch.Museq
Dispatch.Join.Internal
Dispatch.Join
Dispatch.Msg.Act
** skipped
Time.hs: arc and _arcFold
Museq.hs: the renaming functions
* TODO learn to use
** TODO what do those Join functions do?
** TODO can concatenation screw with event durations?
Consider a Museq `m` with dur=sup=1 and a single event,
which starts at 0 and ends on 2.
That event is supposed to have duration 2.
If you concatenate another Museq `n` to the end of that one,
will the event in `m` now have duration 2 + (duration of `n`)?
* TODO refactor using retrie
Simple sed with these would be tricky -- worry about prefixes, parentheses.
** Time -> ATime (for "absolute time")
after reading Dispatch I'll probably understand what RTime, ATime are
** evStart = evArc . _1, evEnd   = evArc . _2
* TODO mysteries
** TODO what is a frame?
frameDuration = 0.1. Is that in seconds?
** TODO Can it be lazy?
** TODO is it smart about `Msg` size? Does it matter?
*** the idea
The Msg type can carry a lot of different parameter instructions.
Should it, or is the cost of sending a different Msg for each parameter negligible?
If it should, does it? That is, do the Museq-creating helper functions bundle simultaneous parameters into the same Msg?
*** I think it isn't
See, e.g., this type signature:
  boopMsg :: Msg -> [Msg' BoopParams]
** Why is "trigger" a parameter for Sampler Museqs?
** TODO Is `frameDuration` in seconds?
Once I know, it needs a comment.
* TODO important
** laziness
Because evaluating a whole sequence before playing any of it can cause a huge dealy.
*** ugly compromise: keep both instructions and maybe the data
The data would still be evaluated in its entirely rather than as needed.
But once it is evaluated, it is kept.
** obvious: move retrigger handling
*** two motivations
Including retrigger as a Museq parameter bloats them.
Changing _sup or _dur can ruin a Sampler sequence.
*** better solution: manage Sampler trigger values from Dispatch
Don't include "trigger" as a parameter in a Museq.
Instead, add trigger=1 to every Museq message,
and follow it closely by a trigger=0.
** unify the many mkMuseq methods
*** illustration of the problem
(l,time,time,Msg)
(time,Note)
etc.
*** idea: add Maybe to Note, and banish bare Msg values in a Museq
Stop using the Museq Msg type.
Instead use Museq Note',
where Note' is like Note but the synthdef is wrapped in a Maybe.
** background states for voices
*** motivation: can't adjust a parameter that's not in a Museq
*** motivation: restore a Zot to reasonable parameter values
**** Idea: a map from voices to all params that have been modified in it.
**** Idea: a way to change the synth without using a Museq.
** use defaults in, e.g., amp :: (Float -> Float) -> Museq -> Museq
Currently there are both "amp" and "ampTo";
one takes a function, the other a value.
I could stick to the one that takes a function,
if it assumed the default value when that value is not present.
** delete duplicate drums
Or at least reduce the volume of one of them.
* TODO easy
** TODO zotOneMsg should not use error
when it receives an unexpected message
** mmho
*** rewrite mmho so that duration is last
*** versions that don't expect a name
*** a version that zips (map RTime [0..]) to a list of payloads
and computes the duration automatically (as the length of the list)
** amplitude group for all drums, all pitched tracks
** redundant: ev4 ~ mkEv
** stereo
 http://www.cs.cmu.edu/~music/icm-online/readings/panlaws/index.html
*** try first: the "constant power" rule
 Let L(theta) = cos theta,
     R(theta) = sin theta
 where theta ranges from 0 (left) to pi/2 (right)
*** if that makes the center position too loud
 try the "compromise" described later in the article
** shorthand
*** TODO noteToFreq = ops [("freq", (*) 300 . \p -> 2**(p/12))]
*** ? per parameter, a function to change it or set it if absent
** a chAll that adds names automatically
Maybe just use big stacks.
* TODO more
** important ? missing drums
tom -- low, high
cymbal -- ride, crash, cowbell
woodblock
clap
tambourine
** to prevent loud unisons during polyphonic merges
Use per-voice explicit or random phase|freq variation.
This way, when a polyphonic Museq is joined with another,
and the poly one is silent,
the many voices will not create huge waveform peaks.
** ? the Join functions that accept two kinds of labels are dumb
They should accept only one kind, in the Monoid class,
and join them if needed with (<>).
* TODO gui
** motivation: can't understand why it souonds like it does
** motivation: can't adjust individual notes
* PITFALLS
** timeForBothToPlayThrough v. timeForBothToRepeat
*** the tradeoff
**** timeForBothToPlayThrough is "safer"
stack used to be written in terms of timeForBothToRepeat,
but that led to this bug

> c2 = dur .~ 2 $ mmh 1 $ pre2 "" $ [ (0, "a") ]
> c2
Museq {_dur = 2 % 1, _sup = 1 % 1, _vec = [Event {_evLabel = "", _evArc = (0 % 1,1 % 1), _evData = "a"}]}
> stack c2 c2
Museq {_dur = 2 % 1, _sup = 1 % 1, _vec = []}
**** timeForBothToRepeat can be more efficient
In the case of stack, if the time to repeat is less than the time to play through,
the result of stacking two things can be a lot smaller if they are not looped all the way through.
*** solutions
**** it's not really that timeForBothToPlayThrough is "safer"
 I'm sure there's a good way to do it -- just, like, check that it won't fuck up.
**** another, also best-of-both-worlds, solution
 Use timeToPlayThrough,
 but then rewrite the result more concisely if possible.
*** might be a problem with merge
although I've only actually noticed it in stack
* leads
./Dispatch/Dispatch.hs: -- todo ? awkward : The Ev' label gets repeated within the Action.
* speed
** no longer critical
Complex patterns no longer causes the app to hang notes until it evaluates,
thanks to the parallelization introduced just after
commit 9247c4c82c89a2d6577c7b7b40cb18cdff65ed7c
** which functions are slow
merge, meta, and subfunctions
see prof/ for details
** how to profile
*** run these to build the .prof file
 stack run --profile -- montevideo-exe --ghci-options="-O"
 stack exec -- montevideo-exe +RTS -p
*** then run something like this to make it readable
 This assumes that I've moved the last two columns (inherited percentages) to be first.

 egrep -v "^ *[0-9]\." montevideo-exe.prof > double-digits.prof
 egrep -v "^ *[0-2]\." montevideo-exe.prof > more-than-2-percent.prof
*** more supposedly-good options
 (according to http://www.fatvat.co.uk/2010/08/speeding-up-ants-program.html)
 -prof - Enables profiling
 -caf-all - Constant Applicative form for all top-level items (constant costs, one for each module.)
 -auto-all - Cost-centre analysis for every top-level function
* graph
** split rels v. reify
*** TODO how
**** add type: Reif
 RAtom = RScale [Number]
       | RStr String
       | RNum Number
 RMuseq = RMScale (Museq String Scale)
        | RMNum (Museq String Num)
        | RMMsg (Museq String Msg)
        | RMNote (Museq String Note)
        | RMMeta (Museq String (Museq -> Museq))
 RFunction = RNum2 (Number -> Number)
           | RNum3 (Number -> Number -> Number)
           | RScale2 ([Number] -> [Number])
           | RTransform (Museq -> Museq)
           | RJoin (Museq -> Museq -> Museq)
 Reif = ReifAtom RAtom
      | ReifFunc RFunction
      | ReifParam String Number
      | ReifAt Time Reif
      | ReifToSynth SynthDefEnum (Museq String Msg)
**** add: eval :: Disp -> Rslt -> Addr -> Reif
**** add play  :: Reif -> IO ()
**** leave unchanged: evalSynthParam :: Rslt -> Addr -> Either String Msg
**** make polymorphic: evalParamEvent :: Rslt -> Addr -> Either String a
*** why
 The "_ in <pattern name> at <time>"
 relationship is polymorphic in its first member.

 My two options are to split it into multiple rels
 ("param _ in _ at _", "scale _ in _ at _", etc.)
 or to reify the elements of Dispatch into a single type.

 The first is nicer to code,
 but it means duplicating lots of functions,
 which sucks for the user who has to remember them.
** extend graph language
 parameters (on, amp)
 functions
 function patterns
 scale patterns
** play song from UI
*** modify Hode to let using code add to the UI
** how to cut through the boilerplate in Vivid.Hode?
 HExpr helped, but there ought to be a way to build all those functions from a single HExprF.
* also whatever is in org/todo.org
* the best licks
2/3
3
7/1
1/3
* old
** fix
*** it should be an error for two notes with the same name to go to two different `SynthDefEnum`s
*** use museqIsValid in join|transform tests
**** and test the new museqIsValid's extra clauses
** add
*** parse a DSL for it
**** seems much easier to make the DSL after the functions it will encode
**** for every bit of terse punctuation, include a verbal alternative
***** => easier to remember, easier to search for language constructs
*** not super important
**** space: play a duration n < k loop over duration k.
***** Was hard in Tidal, but maybe append makes it easy.
** supercollider mysteries
*** envelopes
*** many voices to one distortion
**** a recent reference
Tom Murphy wrote, May 19, 2020, 4:55 PM:
""" If you want to do the literal version of the above (separate synths, with their output fed into an audio effect), the term you're looking for is audio buses. I can whip up a quick example later, but the functions you need are "synthBefore" (to make sure the execution order is right) and aIn. You then send your signals to an audio bus instead of to bus 0 with "out." """
**** an early reference
 https://we.lurk.org/hyperkitty/list/haskell-art@we.lurk.org/thread/2BZIBR3DDOF3XPZ5UYBXJPYEPSPKIYFH/
*** slow changes, e.g. for slide guitar
** DONE problems that seem solved
*** bug ! melodies get mangled if tempo is near 1 but not 1
**** the problem was floating point error in `arc`, solved by using only Rationals as times
*** chTempo: continuity
**** when changing tempo, figure out how many cycles have passed since time0
**** rewrite time0 so it's still true at the new tempo
** once it's publishable
*** add Cabal install notes. Tom made suggestions in the seventh message of the haskell-art thread, "Vivid: Some code that parses instructions to synths polymorphically"
* refs
** Haksell For All on breaking from a loop gracefully
http://www.haskellforall.com/2012/07/breaking-from-loop.html
I can't find EitherT in recent versions of Stackage
